@use "sass:map";
@use "sass:list";
@use "sass:string";

//https://stackoverflow.com/a/25975282
@mixin for-safari {
    @media not all and (min-resolution: 0.001dpcm) {
        @supports (-webkit-appearance: none) {
            @content;
        }
    }
    @supports (-webkit-hyphens: none) {
        @content;
    }

    @media not all and (min-resolution: 0.001dpcm) {
        @supports (-webkit-appearance: none) and (stroke-color: transparent) {
            @content;
        }
    }
}

/**
* The `@mixin media-query` is a Sass mixin that generates media queries based on a given width and
* type (defaulting to "min"). It allows you to write CSS rules that will only apply when the screen
* width matches the specified condition.
*/
@mixin media-query($width, $type: min) {
    @if $type == max {
        $width: $width - 1px;
    }
    @media only screen and (#{$type}-width: $width) {
        @content;
    }
}

$mimeTypes: (
    "jpg": "image/jpeg",
    "pjpg": "image/pjpg",
    "png": "image/png",
    "gif": "image/gif",
    "webp": "image/webp",
    "avif": "image/avif",
    "tiff": "image/tiff",
);

/**
* The `@mixin responsive-background-image-from-existing-css-var` is a Sass mixin that generates
* responsive background images based on existing CSS variables.
*/
@mixin responsive-background-image-from-existing-css-var(
    $sizes,
    $extensions,
    $full
) {
    @each $size in $sizes {
        $images: null;
        @each $extension in $extensions {
            @if $size == $full {
                background-image: var(--#{$extension}-full);
                $images: list.append(
                    $images,
                    var(--#{$extension}-full)
                        type(string.quote(#{map.get($mimeTypes, $extension)})),
                    $separator: comma
                );
                background-image: image-set($images);
            } @else {
                @include media-query($size, max) {
                    background-image: var(--#{$extension}-#{$size});
                    $images: list.append(
                        $images,
                        var(--#{$extension}-#{$size})
                            type(
                                string.quote(#{map.get($mimeTypes, $extension)})
                            ),
                        $separator: comma
                    );
                    background-image: image-set($images);
                }
            }
        }
    }
}

/**
* The `.img-container` class is defining a responsive container for an image. It sets the maximum width of the
* container to 100% of its parent element, ensuring that the image does not exceed the width of the
* container. The height of the container is set to auto, allowing it to adjust proportionally based on
* the width.
*/
.img-container {
    max-width: 100%;
    height: auto;
    img {
        resize: both;
        width: 100%;
        height: auto;
    }
}
